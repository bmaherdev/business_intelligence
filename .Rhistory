library(tidyverse)
library(caret)
library(stargazer)
library(ranger)
### Get working directory
getwd()
#### - - - - - - - - - - Import land area dataset - - - - - - - - - - -
land_area <- read_csv("land_area.csv") %>%
rename(SqMiles = `SqMiles`) %>%
mutate(County = str_to_upper(County)) %>%
select(County, SqMiles)
print(land_area)
#### - - - - - - - - - - Import obesity dataset - - - - - - - - - - -
obesity <- read_csv("obesity.csv") %>%
rename(ObesityCases = `Number`) %>%
mutate(County = str_to_upper(County))
print(obesity)
#### - - - - - - - - - - Import physical inactivity dataset - - - - - - - - - - -
physical_inactivity <- read_csv("physical_inactivity.csv") %>%
rename(PhysicallyInactiveCases = `Number`) %>%
mutate(County = str_to_upper(County))
print(physical_inactivity)
#### - - - - - - - - - - Import diabetes datasets - - - - - - - - - - -
diabetes_2013 <- read_csv("DiabetesAtlas_CountyData_2013.csv", skip = 2)
diabetes_2015 <- read_csv("DiabetesAtlas_CountyData_2015.csv", skip = 2)
diabetes_2017 <- read_csv("DiabetesAtlas_CountyData_2017.csv", skip = 2)
diabetes_2020 <- read_csv("DiabetesAtlas_CountyData_2020.csv", skip = 2)
diabetes_2013 <- diabetes_2013 %>% mutate(Year = 2013)
diabetes_2015 <- diabetes_2015 %>% mutate(Year = 2015)
diabetes_2017 <- diabetes_2017 %>% mutate(Year = 2017)
diabetes_2020 <- diabetes_2020 %>% mutate(Year = 2020)
colnames(diabetes_2013) <- colnames(diabetes_2015) <- colnames(diabetes_2017) <- colnames(diabetes_2020)
clean_county <- function(df) {
df %>%
mutate(County = str_replace(County, " County$", "") %>% str_to_upper())
}
diabetes_2013 <- clean_county(diabetes_2013)
diabetes_2015 <- clean_county(diabetes_2015)
diabetes_2017 <- clean_county(diabetes_2017)
diabetes_2020 <- clean_county(diabetes_2020)
diabetes_merged <- bind_rows(diabetes_2013, diabetes_2015, diabetes_2017, diabetes_2020) %>%
arrange(County, Year)
print(diabetes_merged)
#### - - - - - - - - - - Import income dataset - - - - - - - - - - -
income <- read_csv("economics_24.csv")
excluded_values <- c("GEORGIA", "SOUTHEAST", "UNITED STATES", "NA",
"Source:", "Notes:", "Per Capita Personal Income",
"The local area estimates", "Net earnings")
income_long <- income %>%
pivot_longer(
cols = c("2013 Per Capita Personal Income",
"2015 Per Capita Personal Income",
"2017 Per Capita Personal Income",
"2020 Per Capita Personal Income"),
names_to = "Year", values_to = "Per Capita Income") %>%
mutate(Year = as.numeric(str_extract(Year, "\\d{4}")),
`Per Capita Income` = parse_number(`Per Capita Income`)) %>%
filter(!County %in% excluded_values & !is.na(County) & !is.na(`Per Capita Income`)) %>%
select(County, Year, `Per Capita Income`) %>%
arrange(County, Year)
print(income_long)
#### - - - - - - - - - - Import physician datasets - - - - - - - - - - -
physician_2013 <- read_csv("2013_Rate_and_Rank.csv")
physician_2015 <- read_csv("2015_Rate_and_Rank.csv")
physician_2017 <- read_csv("2017_Rate_and_Rank.csv")
physician_2020 <- read_csv("2020_Rate_and_Rank.csv")
physician_merged <- bind_rows(physician_2013, physician_2015, physician_2017, physician_2020) %>%
rename(County = `County Name`) %>%
mutate(County = str_to_upper(County)) %>%
arrange(County, Year)
print(physician_merged)
#### - - - - - - - - - - Join Tibbles - - - - - - - - - - -
unfinal_data <- list(diabetes_merged, income_long, physician_merged, obesity, physical_inactivity) %>%
reduce(full_join, by = c("County", "Year")) %>%
full_join(land_area, by = "County") %>%
arrange(County, Year) %>%
select(
County, Year, DiabetesCases = Number,
PerCapitaIncome = `Per Capita Income`, Population,
TotalPhysicians = `Total Physicians`,
PhysicianRatePer100000 = `Rate Per 100000`,
SqMiles,  # Include land area column
ObesityCases,  # Include obesity data
PhysicallyInactiveCases  # Include physical inactivity data
) %>%
# Add Population Density column
mutate(PopulationDensity = Population / SqMiles)
# Turn variables into rates
unfinal_data <- unfinal_data %>%
mutate(DiabetesRate = DiabetesCases / Population, PhysicianDensity = TotalPhysicians / Population, ObesityRate = ObesityCases / Population, InactivityRate = PhysicallyInactiveCases / Population)
# Create table with variables of intrest
final_data <- unfinal_data %>%
select(County, Year, DiabetesRate, PerCapitaIncome, PhysicianDensity, ObesityRate, InactivityRate, PopulationDensity)
# Print the final cleaned dataset
print(final_data)
# Export final_data to CSV
write_csv(final_data, "final_data.csv")
# Transform tibble into dataframe
final.data <- as.data.frame(final_data)
final.data
# Create descriptive table
stargazer(final.data[3 : 8], type = "html", title="Descriptive Statistics", digits = 2, out = "descriptiveTable.html")
#Create correlations matrix
correlations <- cor(final.data[3 : 8])
stargazer(correlations, title = "Correlation Matrix", out = "CorrelationMatrix.html")
#Control for year
final_data  <- final_data  %>%
mutate(YearN = case_when(
Year == "2013" ~ 0,
Year == "2015" ~ 1,
Year == "2017" ~ 2,
Year == "2020" ~ 3
))
# Prepare data for model by removing unnecessary variables
final_data <- final_data %>%
select (DiabetesRate, PerCapitaIncome, PhysicianDensity, ObesityRate, InactivityRate, PopulationDensity, YearN)
### Create Machine Learning Model ###
finalData <- drop_na(final_data)
set.seed(15L)
trainIndex <- createDataPartition( finalData$DiabetesRate, p= 0.7, list = FALSE, times = 1)
trainIndex
##Create training and test data
##Data set for training, we learnt the use of [ ] in Data Manipulation 1
train_set <- finalData[trainIndex, ]
train_set
##Data set for testing
test_set <- finalData[-trainIndex, ]
##Stargazer only works with dataframes
##Transform our tibble into a dataframe - we learnt it in data manipulation class
train_set_df<- as.data.frame(train_set)
train_set_df
##Use the stargazer command to create the descriptive table
stargazer(train_set_df, type = "text", title="Descriptive Statistics", digits = 1, out = "descriptiveStatistics.txt")
##Calculate correlations
##Correlations between numeric variables
#GDP_train_num <- GDP_train %>%
#  select_if(is.numeric) %>%
#  select(-c("Year"))
cor(train_set)
###Build the model using the test set and linear regression
## I selected 3 independent variables HB41_CurrentSmoker, HO49_Diabetes, HO33_OverwtAdult
model <- train(DiabetesRate ~ PhysicianDensity + ObesityRate + InactivityRate + YearN, data = train_set, method = "lm")
###Display the model
summary(model)
###Evaluate the model performance
##Predict the outcomes in the test set
p <- predict(model, test_set)
##Calculate RMSE and R2 for the prediction
postResample(pred = p, test_set$DiabetesRate)
### Predicted vs observed data in a graph
##Graph the results in the linear model (LM)
test_set %>%
mutate(predicted = predict(model, test_set)) %>%
ggplot(aes(predicted, DiabetesRate)) +
geom_point(colour = "blue", alpha = 0.3) +
labs(title = "Predicted vs Observed") + theme_bw(18)
##Run the model with the ranger algorithm, which is a random forest algorithm
model2 <- train(DiabetesRate ~ PhysicianDensity + ObesityRate + InactivityRate + YearN, data = train_set, method = "ranger")
##Print model 2
model2
##Predict the outcomes in the test set
p1 <- predict(model2, test_set)
##Evaluate model performance using RMSE and R2
postResample(pred = p1, test_set$DiabetesRate)
install.packages("ranger")
+
### Install packages (if not already installed)
#install.packages("tidyverse")
#install.packages("caret")
#install.packages("stargazer")
install.packages("ranger")
install.packages("ranger")
### Install packages (if not already installed)
#install.packages("tidyverse")
#install.packages("caret")
#install.packages("stargazer")
#install.packages("ranger")
### Load libraries
library(tidyverse)
library(caret)
library(stargazer)
library(ranger)
### Get working directory
getwd()
#### - - - - - - - - - - Import land area dataset - - - - - - - - - - -
land_area <- read_csv("land_area.csv") %>%
rename(SqMiles = `SqMiles`) %>%
mutate(County = str_to_upper(County)) %>%
select(County, SqMiles)
print(land_area)
#### - - - - - - - - - - Import obesity dataset - - - - - - - - - - -
obesity <- read_csv("obesity.csv") %>%
rename(ObesityCases = `Number`) %>%
mutate(County = str_to_upper(County))
print(obesity)
#### - - - - - - - - - - Import physical inactivity dataset - - - - - - - - - - -
physical_inactivity <- read_csv("physical_inactivity.csv") %>%
rename(PhysicallyInactiveCases = `Number`) %>%
mutate(County = str_to_upper(County))
print(physical_inactivity)
#### - - - - - - - - - - Import diabetes datasets - - - - - - - - - - -
diabetes_2013 <- read_csv("DiabetesAtlas_CountyData_2013.csv", skip = 2)
diabetes_2015 <- read_csv("DiabetesAtlas_CountyData_2015.csv", skip = 2)
diabetes_2017 <- read_csv("DiabetesAtlas_CountyData_2017.csv", skip = 2)
diabetes_2020 <- read_csv("DiabetesAtlas_CountyData_2020.csv", skip = 2)
diabetes_2013 <- diabetes_2013 %>% mutate(Year = 2013)
diabetes_2015 <- diabetes_2015 %>% mutate(Year = 2015)
diabetes_2017 <- diabetes_2017 %>% mutate(Year = 2017)
diabetes_2020 <- diabetes_2020 %>% mutate(Year = 2020)
colnames(diabetes_2013) <- colnames(diabetes_2015) <- colnames(diabetes_2017) <- colnames(diabetes_2020)
clean_county <- function(df) {
df %>%
mutate(County = str_replace(County, " County$", "") %>% str_to_upper())
}
diabetes_2013 <- clean_county(diabetes_2013)
diabetes_2015 <- clean_county(diabetes_2015)
diabetes_2017 <- clean_county(diabetes_2017)
diabetes_2020 <- clean_county(diabetes_2020)
diabetes_merged <- bind_rows(diabetes_2013, diabetes_2015, diabetes_2017, diabetes_2020) %>%
arrange(County, Year)
print(diabetes_merged)
#### - - - - - - - - - - Import income dataset - - - - - - - - - - -
income <- read_csv("economics_24.csv")
excluded_values <- c("GEORGIA", "SOUTHEAST", "UNITED STATES", "NA",
"Source:", "Notes:", "Per Capita Personal Income",
"The local area estimates", "Net earnings")
income_long <- income %>%
pivot_longer(
cols = c("2013 Per Capita Personal Income",
"2015 Per Capita Personal Income",
"2017 Per Capita Personal Income",
"2020 Per Capita Personal Income"),
names_to = "Year", values_to = "Per Capita Income") %>%
mutate(Year = as.numeric(str_extract(Year, "\\d{4}")),
`Per Capita Income` = parse_number(`Per Capita Income`)) %>%
filter(!County %in% excluded_values & !is.na(County) & !is.na(`Per Capita Income`)) %>%
select(County, Year, `Per Capita Income`) %>%
arrange(County, Year)
print(income_long)
#### - - - - - - - - - - Import physician datasets - - - - - - - - - - -
physician_2013 <- read_csv("2013_Rate_and_Rank.csv")
physician_2015 <- read_csv("2015_Rate_and_Rank.csv")
physician_2017 <- read_csv("2017_Rate_and_Rank.csv")
physician_2020 <- read_csv("2020_Rate_and_Rank.csv")
physician_merged <- bind_rows(physician_2013, physician_2015, physician_2017, physician_2020) %>%
rename(County = `County Name`) %>%
mutate(County = str_to_upper(County)) %>%
arrange(County, Year)
print(physician_merged)
#### - - - - - - - - - - Join Tibbles - - - - - - - - - - -
unfinal_data <- list(diabetes_merged, income_long, physician_merged, obesity, physical_inactivity) %>%
reduce(full_join, by = c("County", "Year")) %>%
full_join(land_area, by = "County") %>%
arrange(County, Year) %>%
select(
County, Year, DiabetesCases = Number,
PerCapitaIncome = `Per Capita Income`, Population,
TotalPhysicians = `Total Physicians`,
PhysicianRatePer100000 = `Rate Per 100000`,
SqMiles,  # Include land area column
ObesityCases,  # Include obesity data
PhysicallyInactiveCases  # Include physical inactivity data
) %>%
# Add Population Density column
mutate(PopulationDensity = Population / SqMiles)
# Turn variables into rates
unfinal_data <- unfinal_data %>%
mutate(DiabetesRate = DiabetesCases / Population, PhysicianDensity = TotalPhysicians / Population, ObesityRate = ObesityCases / Population, InactivityRate = PhysicallyInactiveCases / Population)
# Create table with variables of intrest
final_data <- unfinal_data %>%
select(County, Year, DiabetesRate, PerCapitaIncome, PhysicianDensity, ObesityRate, InactivityRate, PopulationDensity)
# Print the final cleaned dataset
print(final_data)
# Export final_data to CSV
write_csv(final_data, "final_data.csv")
# Transform tibble into dataframe
final.data <- as.data.frame(final_data)
final.data
# Create descriptive table
stargazer(final.data[3 : 8], type = "html", title="Descriptive Statistics", digits = 2, out = "descriptiveTable.html")
#Create correlations matrix
correlations <- cor(final.data[3 : 8])
stargazer(correlations, title = "Correlation Matrix", out = "CorrelationMatrix.html")
#Control for year
final_data  <- final_data  %>%
mutate(YearN = case_when(
Year == "2013" ~ 0,
Year == "2015" ~ 1,
Year == "2017" ~ 2,
Year == "2020" ~ 3
))
# Prepare data for model by removing unnecessary variables
final_data <- final_data %>%
select (DiabetesRate, PerCapitaIncome, PhysicianDensity, ObesityRate, InactivityRate, PopulationDensity, YearN)
### Create Machine Learning Model ###
finalData <- drop_na(final_data)
set.seed(15L)
trainIndex <- createDataPartition( finalData$DiabetesRate, p= 0.7, list = FALSE, times = 1)
trainIndex
##Create training and test data
##Data set for training, we learnt the use of [ ] in Data Manipulation 1
train_set <- finalData[trainIndex, ]
train_set
##Data set for testing
test_set <- finalData[-trainIndex, ]
##Stargazer only works with dataframes
##Transform our tibble into a dataframe - we learnt it in data manipulation class
train_set_df<- as.data.frame(train_set)
train_set_df
##Use the stargazer command to create the descriptive table
stargazer(train_set_df, type = "text", title="Descriptive Statistics", digits = 1, out = "descriptiveStatistics.txt")
##Calculate correlations
##Correlations between numeric variables
#GDP_train_num <- GDP_train %>%
#  select_if(is.numeric) %>%
#  select(-c("Year"))
cor(train_set)
###Build the model using the test set and linear regression
## I selected 3 independent variables HB41_CurrentSmoker, HO49_Diabetes, HO33_OverwtAdult
model <- train(DiabetesRate ~ PhysicianDensity + ObesityRate + YearN, data = train_set, method = "lm")
###Display the model
summary(model)
###Evaluate the model performance
##Predict the outcomes in the test set
p <- predict(model, test_set)
##Calculate RMSE and R2 for the prediction
postResample(pred = p, test_set$DiabetesRate)
### Predicted vs observed data in a graph
##Graph the results in the linear model (LM)
test_set %>%
mutate(predicted = predict(model, test_set)) %>%
ggplot(aes(predicted, DiabetesRate)) +
geom_point(colour = "blue", alpha = 0.3) +
labs(title = "Predicted vs Observed") + theme_bw(18)
##Run the model with the ranger algorithm, which is a random forest algorithm
model2 <- train(DiabetesRate ~ PhysicianDensity + ObesityRate + YearN, data = train_set, method = "ranger")
##Print model 2
model2
##Predict the outcomes in the test set
p1 <- predict(model2, test_set)
##Evaluate model performance using RMSE and R2
postResample(pred = p1, test_set$DiabetesRate)
### Install packages (if not already installed)
#install.packages("tidyverse")
#install.packages("caret")
#install.packages("stargazer")
#install.packages("ranger")
### Load libraries
library(tidyverse)
library(caret)
library(stargazer)
library(ranger)
### Get working directory
getwd()
#### - - - - - - - - - - Import land area dataset - - - - - - - - - - -
land_area <- read_csv("land_area.csv") %>%
rename(SqMiles = `SqMiles`) %>%
mutate(County = str_to_upper(County)) %>%
select(County, SqMiles)
print(land_area)
#### - - - - - - - - - - Import obesity dataset - - - - - - - - - - -
obesity <- read_csv("obesity.csv") %>%
rename(ObesityCases = `Number`) %>%
mutate(County = str_to_upper(County))
print(obesity)
#### - - - - - - - - - - Import physical inactivity dataset - - - - - - - - - - -
physical_inactivity <- read_csv("physical_inactivity.csv") %>%
rename(PhysicallyInactiveCases = `Number`) %>%
mutate(County = str_to_upper(County))
print(physical_inactivity)
#### - - - - - - - - - - Import diabetes datasets - - - - - - - - - - -
diabetes_2013 <- read_csv("DiabetesAtlas_CountyData_2013.csv", skip = 2)
diabetes_2015 <- read_csv("DiabetesAtlas_CountyData_2015.csv", skip = 2)
diabetes_2017 <- read_csv("DiabetesAtlas_CountyData_2017.csv", skip = 2)
diabetes_2020 <- read_csv("DiabetesAtlas_CountyData_2020.csv", skip = 2)
diabetes_2013 <- diabetes_2013 %>% mutate(Year = 2013)
diabetes_2015 <- diabetes_2015 %>% mutate(Year = 2015)
diabetes_2017 <- diabetes_2017 %>% mutate(Year = 2017)
diabetes_2020 <- diabetes_2020 %>% mutate(Year = 2020)
colnames(diabetes_2013) <- colnames(diabetes_2015) <- colnames(diabetes_2017) <- colnames(diabetes_2020)
clean_county <- function(df) {
df %>%
mutate(County = str_replace(County, " County$", "") %>% str_to_upper())
}
diabetes_2013 <- clean_county(diabetes_2013)
diabetes_2015 <- clean_county(diabetes_2015)
diabetes_2017 <- clean_county(diabetes_2017)
diabetes_2020 <- clean_county(diabetes_2020)
diabetes_merged <- bind_rows(diabetes_2013, diabetes_2015, diabetes_2017, diabetes_2020) %>%
arrange(County, Year)
print(diabetes_merged)
#### - - - - - - - - - - Import income dataset - - - - - - - - - - -
income <- read_csv("economics_24.csv")
excluded_values <- c("GEORGIA", "SOUTHEAST", "UNITED STATES", "NA",
"Source:", "Notes:", "Per Capita Personal Income",
"The local area estimates", "Net earnings")
income_long <- income %>%
pivot_longer(
cols = c("2013 Per Capita Personal Income",
"2015 Per Capita Personal Income",
"2017 Per Capita Personal Income",
"2020 Per Capita Personal Income"),
names_to = "Year", values_to = "Per Capita Income") %>%
mutate(Year = as.numeric(str_extract(Year, "\\d{4}")),
`Per Capita Income` = parse_number(`Per Capita Income`)) %>%
filter(!County %in% excluded_values & !is.na(County) & !is.na(`Per Capita Income`)) %>%
select(County, Year, `Per Capita Income`) %>%
arrange(County, Year)
print(income_long)
#### - - - - - - - - - - Import physician datasets - - - - - - - - - - -
physician_2013 <- read_csv("2013_Rate_and_Rank.csv")
physician_2015 <- read_csv("2015_Rate_and_Rank.csv")
physician_2017 <- read_csv("2017_Rate_and_Rank.csv")
physician_2020 <- read_csv("2020_Rate_and_Rank.csv")
physician_merged <- bind_rows(physician_2013, physician_2015, physician_2017, physician_2020) %>%
rename(County = `County Name`) %>%
mutate(County = str_to_upper(County)) %>%
arrange(County, Year)
print(physician_merged)
#### - - - - - - - - - - Join Tibbles - - - - - - - - - - -
unfinal_data <- list(diabetes_merged, income_long, physician_merged, obesity, physical_inactivity) %>%
reduce(full_join, by = c("County", "Year")) %>%
full_join(land_area, by = "County") %>%
arrange(County, Year) %>%
select(
County, Year, DiabetesCases = Number,
PerCapitaIncome = `Per Capita Income`, Population,
TotalPhysicians = `Total Physicians`,
PhysicianRatePer100000 = `Rate Per 100000`,
SqMiles,  # Include land area column
ObesityCases,  # Include obesity data
PhysicallyInactiveCases  # Include physical inactivity data
) %>%
# Add Population Density column
mutate(PopulationDensity = Population / SqMiles)
# Turn variables into rates
unfinal_data <- unfinal_data %>%
mutate(DiabetesRate = DiabetesCases / Population, PhysicianDensity = TotalPhysicians / Population, ObesityRate = ObesityCases / Population, InactivityRate = PhysicallyInactiveCases / Population)
# Create table with variables of intrest
final_data <- unfinal_data %>%
select(County, Year, DiabetesRate, PerCapitaIncome, PhysicianDensity, ObesityRate, InactivityRate, PopulationDensity)
# Print the final cleaned dataset
print(final_data)
# Export final_data to CSV
write_csv(final_data, "final_data.csv")
# Transform tibble into dataframe
final.data <- as.data.frame(final_data)
final.data
# Create descriptive table
stargazer(final.data[3 : 8], type = "html", title="Descriptive Statistics", digits = 2, out = "descriptiveTable.html")
#Create correlations matrix
correlations <- cor(final.data[3 : 8])
stargazer(correlations, title = "Correlation Matrix", out = "CorrelationMatrix.html")
#Control for year
final_data  <- final_data  %>%
mutate(YearN = case_when(
Year == "2013" ~ 0,
Year == "2015" ~ 1,
Year == "2017" ~ 2,
Year == "2020" ~ 3
))
# Prepare data for model by removing unnecessary variables
final_data <- final_data %>%
select (DiabetesRate, PerCapitaIncome, PhysicianDensity, ObesityRate, InactivityRate, PopulationDensity, YearN)
### Create Machine Learning Model ###
finalData <- drop_na(final_data)
set.seed(15L)
trainIndex <- createDataPartition( finalData$DiabetesRate, p= 0.7, list = FALSE, times = 1)
trainIndex
##Create training and test data
##Data set for training, we learnt the use of [ ] in Data Manipulation 1
train_set <- finalData[trainIndex, ]
train_set
##Data set for testing
test_set <- finalData[-trainIndex, ]
##Stargazer only works with dataframes
##Transform our tibble into a dataframe - we learnt it in data manipulation class
train_set_df<- as.data.frame(train_set)
train_set_df
##Use the stargazer command to create the descriptive table
stargazer(train_set_df, type = "text", title="Descriptive Statistics", digits = 1, out = "descriptiveStatistics.txt")
##Calculate correlations
##Correlations between numeric variables
#GDP_train_num <- GDP_train %>%
#  select_if(is.numeric) %>%
#  select(-c("Year"))
cor(train_set)
###Build the model using the test set and linear regression
## I selected 3 independent variables HB41_CurrentSmoker, HO49_Diabetes, HO33_OverwtAdult
model <- train(DiabetesRate ~ PerCapitaIncome + PhysicianDensity + ObesityRate + InactivityRate + YearN, data = train_set, method = "lm")
###Display the model
summary(model)
###Evaluate the model performance
##Predict the outcomes in the test set
p <- predict(model, test_set)
##Calculate RMSE and R2 for the prediction
postResample(pred = p, test_set$DiabetesRate)
### Predicted vs observed data in a graph
##Graph the results in the linear model (LM)
test_set %>%
mutate(predicted = predict(model, test_set)) %>%
ggplot(aes(predicted, DiabetesRate)) +
geom_point(colour = "blue", alpha = 0.3) +
labs(title = "Predicted vs Observed") + theme_bw(18)
##Run the model with the ranger algorithm, which is a random forest algorithm
model2 <- train(DiabetesRate ~ PerCapitaIncome + PhysicianDensity + ObesityRate + InactivityRate + YearN, data = train_set, method = "ranger")
##Print model 2
model2
##Predict the outcomes in the test set
p1 <- predict(model2, test_set)
##Evaluate model performance using RMSE and R2
postResample(pred = p1, test_set$DiabetesRate)
